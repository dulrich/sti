# # foo
[identifier_schars a-zA-Z_
[identifier_chars a-zA-Z0-9_
[num_chars_start 0-9
[float_chars_start 0-9.\-\+
[float_chars 0-9.eE
[float_chars_start 0-9.\-\+
[ws \ \t\r\n

# reserved words
{bool :type |identifier_chars>LST_identifier 
{- :oper +num_chars>LST_probenum
{-- :oper 
{break :keyword |identifier_chars>LST_identifier
{buffer :type |identifier_chars>LST_identifier
{bvec2 :type |identifier_chars>LST_identifier
{bvec3 :type |identifier_chars>LST_identifier
{bvec4 :type |identifier_chars>LST_identifier
{case :keyword |identifier_chars>LST_identifier
{coherent :typespec |identifier_chars>LST_identifier
{const  :typespec |identifier_chars>LST_identifier
{con%st :typespec |identifier_chars>LST_identifier
{con%&st :typespec |identifier_chars>LST_identifier
{continue :keyword |identifier_chars>LST_identifier
{cos :builtin |identifier_chars>LST_identifier
{int :type |identifier_chars>LST_identifier
{int8_t :type |identifier_chars>LST_identifier
{int16_t :type |identifier_chars>LST_identifier
{int32_t :type |identifier_chars>LST_identifier
{int64_t :type |identifier_chars>LST_identifier 

# any of the charset, fail to 
#+identifier_schars >LST_identifier

# from the start state, like above
:LST_identifier +identifier_chars>LST_identifier
:LST_NULL +identifier_schars>LST_identifier

# ^ discards the char while moving to the next state
:LST_NULL +ws^LST_NULL

# single char transition:  @">LST_string
:LST_string +string_chars>LST_string
:LST_string @">LST_string_end
:LST_string @\\>LST_string_esc
:LST_string_esc @">LST_string
:LST_string_end >LST_NULL
 
:LST_NULL @.>LST_float
:LST_NULL @0>LST_probenum
:LST_NULL @1>LST_intnum
:LST_NULL @2>LST_intnum
:LST_NULL @3>LST_intnum
:LST_NULL @4>LST_intnum
:LST_NULL @5>LST_intnum
:LST_NULL @6>LST_intnum
:LST_NULL @7>LST_intnum
:LST_NULL @8>LST_intnum
:LST_NULL @9>LST_intnum

:LST_neg @.>LST_float
:LST_neg +num_chars>LST_probefixed
&LST_neg

:LST_probenum @.>LST_float
:LST_probenum @x>LST_hexnum
:LST_probenum @X>LST_hexnum
:LST_probefixed @x>LST_hexnum
:LST_probefixed @X>LST_hexnum
:LST_probenum +num_chars>LST_octalnum
:LST_probefixed +num_chars>LST_octalnum
:LST_intnum @.>LST_float
:LST_intnum +num_chars>LST_intnum

:LST_float @.>LST_num_ERROR
:LST_float +num_chars>LST_float

&LST_float
&LST_probenum
&LST_intnum
&LST_identifier
